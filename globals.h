#ifndef GLOBALS_H
#define GLOBALS_H

#define BPM 128
#define MPW 6
#define BPW 24
#define EPW 48
#define NSPB (60000000000/BPM)
#define NSPE (NSPB/2)
#define NSPS (NSPB/4)
#define NSPT (NSPB/8)
#define TIMER_DELAY 74700
#define FUNCTION_DELAY 2

#define SONG_MEASURE_COUNT 226
#define SONG_BEAT_COUNT 904
#define SONG_SIXTEENTH_COUNT 3616
#define SONG_THIRTYSECOND_COUNT 7232

#define SMP_M0 32
#define PAUSE_M0 80
#define VERSE5_M0 137
#define INTRO2_M0 (VERSE5_M0+8)
#define VERSE6_M0 (VERSE5_M0+16)
#define REVERT_THIRTYSECOND_COUNT 16
#define REVERT_T0 (VERSE6_M0*32-REVERT_THIRTYSECOND_COUNT)

#define SHALLOW_MEASURE_COUNT 28
#define DEEP_MEASURE_COUNT 20
#define SHALLOW_THIRTYSECOND_COUNT (SHALLOW_MEASURE_COUNT*32)
#define DEEP_THIRTYSECOND_COUNT (DEEP_MEASURE_COUNT*32)
#define WAVE_MEASURE_COUNT (SHALLOW_MEASURE_COUNT+DEEP_MEASURE_COUNT)
#define WAVE_THIRTYSECOND_COUNT (WAVE_MEASURE_COUNT*32-LYRIC_AREA-SMP_AREA)
#define WAVE_SIXTEENTH_COUNT (WAVE_THIRTYSECOND_COUNT/2)
#define WAVE_SIXTEENTH_PERIOD 96
#define WAVE_THIRTYSECOND_PERIOD (WAVE_SIXTEENTH_PERIOD*2)
#define WAVE_M0 89
#define WAVE_S0 (WAVE_M0*16)
#define WAVE_T0 (WAVE_M0*32)
#define DEEP_M0 (WAVE_M0+SHALLOW_MEASURE_COUNT)
#define LOW_TIDE_S0 (WAVE_S0+WAVE_SIXTEENTH_COUNT)
#define LOW_TIDE_T0 (WAVE_T0+WAVE_THIRTYSECOND_COUNT)
#define WASHED_T0 (WAVE_T0+LYRIC_AREA+SMP_AREA)

#define WAVE_COUNT (WAVE_MEASURE_COUNT/MPW)
#define NTE_WIDTH 48
#define NTE_HEIGHT 12
#define NTE_AREA (NTE_WIDTH*NTE_HEIGHT)
#define SMP_WIDTH 24
#define SMP_HEIGHT NTE_HEIGHT
#define SMP_AREA (SMP_WIDTH*SMP_HEIGHT)
#define LYRIC_WIDTH (NTE_WIDTH+SMP_WIDTH)
#define LYRIC_HEIGHT 8
#define LYRIC_AREA (LYRIC_WIDTH*LYRIC_HEIGHT)
#define WINDOW_WIDTH LYRIC_WIDTH
#define WINDOW_HEIGHT (LYRIC_HEIGHT+NTE_HEIGHT)
#define WINDOW_AREA (WINDOW_WIDTH*WINDOW_HEIGHT)

#define STAR_M0 201
#define STAR_X0 0 //20
#define STAR_WIDTH (LYRIC_WIDTH-STAR_X0)
#define STAR_HEIGHT LYRIC_HEIGHT
#define STAR_AREA (STAR_WIDTH*STAR_HEIGHT)
#define EQUILIBRIUM_STAR_COUNT 18
#define OUTRO_M0 (STAR_M0+16)

#include <codecvt>

/* Layout 1
#define NTE_WIDTH 72
#define NTE_HEIGHT 6
#define NTE_AREA NTE_WIDTH*NTE_HEIGHT
#define LYRIC_WIDTH NTE_WIDTH
#define LYRIC_HEIGHT 6
#define LYRIC_AREA LYRIC_WIDTH*LYRIC_HEIGHT
#define SMP_WIDTH 21
#define SMP_HEIGHT LYRIC_HEIGHT+NTE_HEIGHT
#define SMP_AREA SMP_WIDTH*SMP_HEIGHT
#define WINDOW_WIDTH LYRIC_WIDTH+SMP_WIDTH
#define WINDOW_HEIGHT SMP_HEIGHT
#define WINDOW_AREA WINDOW_WIDTH*WINDOW_HEIGHT
*/

extern std::wstring_convert<std::codecvt_utf8<char32_t>, char32_t> CONVERTER1;
extern std::wstring_convert<std::codecvt_utf16<wchar_t, 0x10ffff, std::little_endian>, wchar_t> CONVERTER2;
extern std::wstring_convert<std::codecvt_utf8<char32_t>, char32_t>::state_type STATE;
extern int LOGO_WIDTH;
extern int LOGO_HEIGHT;
extern int LOGO_X0;
extern int LOGO_Y0;
extern int SMP_Y0;
extern int SMP_M1;
extern int LAST_BAR_M0;
extern int REVERT_PER_THIRTYSECOND;
extern int WAVE_LENGTH;
extern std::vector<int> kickRevertCounts;
extern std::vector<std::vector<bool>> reverted; //(SMP_HEIGHT-SMP_Y0, std::vector<bool>(SMP_WIDTH, false))

#endif